import time
import os
from shutil import copy2
import pathlib
import pandas as pd

configfile: "config/config.yaml"
SAMPLES = config['SAMPLES']

OUTDIR = config['parameters']['outdir'] + "/"
print(SAMPLES)

onstart:
    print("This is MABA16S")
    time.sleep(1)

    # copy the config file to output dir
    pathlib.Path(OUTDIR).mkdir(parents=True, exist_ok=True)
    copy2('config/config.yaml', OUTDIR )


    for i in SAMPLES.items():
        print(i[0], '\t', i[1])
    print(f'output directory is: {OUTDIR}')

onerror:
    print(f"these were the samples: {SAMPLES}")
    print("error has occured")


localrules: all, download_kraken2_db, combinereads

rule all:
    input:
        expand(OUTDIR + "kraken2/{sample}/krakenreport.txt", sample = SAMPLES)


rule download_kraken2_db:
    output:
        directory("db/silva")
    threads: 1
    conda:
        "envs/kraken2.yaml"
    shell:
        "kraken2-build --db {output} --special silva"



rule combinereads:
    input:
        lambda wildcards: SAMPLES[wildcards.sample]
    output:
        temp(OUTDIR + "reads/{sample}.fastq.gz")
    threads: 1
    shell:
        "cat {input}/*fastq.gz > {output}"


rule kraken2:
    input:
        reads = rules.combinereads.output,
        db = rules.download_kraken2_db.output
    output:
        report = OUTDIR + "kraken2/{sample}/krakenreport.txt",
        report_filtered = OUTDIR + "kraken2/{sample}/krakenreport_filtered.txt",
        out = OUTDIR + "kraken2/{sample}/output.txt"
    threads: 4
    conda:
        "envs/kraken2.yaml"
    log:
        OUTDIR + "log/kraken2/{sample}.txt"
    shell:
        """
        kraken2 --db {input.db} -t {threads}  --report {output.report} {input.reads} > {output.out} &&
        python scripts/kraken2report.py {output.report} {output.report_filtered}
        """

rule strip_genera:
    input:
        rules.kraken2.output.report
    output:
        OUTDIR + "{sample}/krakenreport_filtered.txt"
    params:
        reads_cutoff_genus = 1
    shell:
        "python scripts/kraken2report.py {input} {output} {params.reads_cutoff_genus}"


def reads_to_extract(file):
    df = pd_read_csv(file, sep = '\t')
    data = df[['taxname', 'taxID']]

    return data.to_list()



rule genus_read_extract:
    input:
        report = rules.kraken2.output.report_filtered,
        krakenfile = rules.kraken2.output.out
        taxid =
    output:
        reads = lambda wildcards[
    threads:
        1
    shell:
        """
        extract_kraken_reads.py  -k {input.krakenfile} -s {input.seq} -t {input.taxid} -o {output.reads}
        """
